/**
 * Contains the definitions for the template specializations of the template class, JMethod.
 *
 * This file is internal to the JACE library.
 */

BEGIN_NAMESPACE(jace)

template <> inline
::jace::proxy::types::JBoolean JMethod< ::jace::proxy::types::JBoolean >::invoke(const JClass& jClass, const JArguments& arguments)
{
  // Get the methodID for the method matching the given arguments.
  jmethodID methodID = getMethodID(jClass, arguments, true);

  // Call the method.
  JNIEnv* env = attach();
  jboolean result;
  
  if (arguments.asList().size() > 0)
    result = env->CallStaticBooleanMethodA(jClass.getClass(), methodID, &toVector(arguments)[0]);
  else
    result = env->CallStaticBooleanMethod(jClass.getClass(), methodID);

  // Catch any java exception that occured during the method call,
  // and throw it as a C++ exception. 
  catchAndThrow();

  return ::jace::proxy::types::JBoolean(result);
}


template <> inline
::jace::proxy::types::JBoolean JMethod< ::jace::proxy::types::JBoolean >::invoke(const ::jace::proxy::JObject& object, const JArguments& arguments)
{
  #ifdef JACE_CHECK_NULLS
    if (object.isNull())
      throw JNIException("[JMethod.invoke] Can not invoke an instance method on a null object.");
  #endif

  // Get the methodID for the method matching the given arguments.
  jmethodID methodID = getMethodID(object.getJavaJniClass(), arguments);

  // Call the method.
  JNIEnv* env = attach();
  jboolean result;
  
  if (arguments.asList().size() > 0)
	result = env->CallBooleanMethodA(static_cast<jobject>(object), methodID, &toVector(arguments)[0]);
  else
    result = env->CallBooleanMethod(static_cast<jobject>(object), methodID);

  // Catch any java exception that occured during the method call,
  // and throw it as a C++ exception.
  catchAndThrow();
  
  return ::jace::proxy::types::JBoolean(result);
}


template <> inline
::jace::proxy::types::JBoolean JMethod< ::jace::proxy::types::JBoolean >::invoke(JNIEnv *env, const JClass& jClass, jmethodID methodID, const jvalue *arguments, size_t nArguments)
{
    // Call the method.
    jboolean result;

    if (nArguments > 0)
        result = env->CallStaticBooleanMethodA(jClass.getClass(), methodID, arguments);
    else
        result = env->CallStaticBooleanMethod(jClass.getClass(), methodID);

    // Catch any java exception that occured during the method call, and throw it as a C++ exception.
    catchAndThrow();

    return ::jace::proxy::types::JBoolean(result);
}


template <> inline
::jace::proxy::types::JBoolean JMethod< ::jace::proxy::types::JBoolean >::invoke(JNIEnv *env, const ::jace::proxy::JObject& object, jmethodID methodID, const jvalue *arguments, size_t nArguments)
{
#ifdef JACE_CHECK_NULLS
    if (object.isNull())
        throw JNIException("[JMethod.invoke] Can not invoke an instance method on a null object.");
#endif
    // Call the method.
    jboolean result;

    if (nArguments > 0)
        result = env->CallBooleanMethodA(object, methodID, arguments);
    else
        result = env->CallBooleanMethod(object, methodID);

    // Catch any java exception that occured during the method call, and throw it as a C++ exception.
    catchAndThrow();

    return ::jace::proxy::types::JBoolean(result);
}


template <> inline
::jace::proxy::types::JByte JMethod< ::jace::proxy::types::JByte >::invoke(const JClass& jClass, const JArguments& arguments)
{
  // Get the methodID for the method matching the given arguments.
  jmethodID methodID = getMethodID(jClass, arguments, true);

  // Call the method.
  JNIEnv* env = attach();
  jbyte result;
  
  if (arguments.asList().size() > 0)
    result = env->CallStaticByteMethodA(jClass.getClass(), methodID, &toVector(arguments)[0]);
  else
    result = env->CallStaticByteMethod(jClass.getClass(), methodID);

  // Catch any java exception that occured during the method call,
  // and throw it as a C++ exception. 
  catchAndThrow();

  return ::jace::proxy::types::JByte(result);
}


template <> inline
::jace::proxy::types::JByte JMethod< ::jace::proxy::types::JByte >::invoke(const ::jace::proxy::JObject& object, const JArguments& arguments)
{
  #ifdef JACE_CHECK_NULLS
    if (object.isNull())
      throw JNIException("[JMethod.invoke] Can not invoke an instance method on a null object.");
  #endif

  // Get the methodID for the method matching the given arguments.
  jmethodID methodID = getMethodID(object.getJavaJniClass(), arguments);

  // Call the method.
  JNIEnv* env = attach();
  jbyte result;
  
  if (arguments.asList().size() > 0)
    result = env->CallByteMethodA(static_cast<jobject>(object), methodID, &toVector(arguments)[0]);
  else
    result = env->CallByteMethod(static_cast<jobject>(object), methodID);

  // Catch any java exception that occured during the method call,
  // and throw it as a C++ exception.
  catchAndThrow();
  
  return ::jace::proxy::types::JByte(result);
}


template <> inline
::jace::proxy::types::JByte JMethod< ::jace::proxy::types::JByte >::invoke(JNIEnv *env, const JClass& jClass, jmethodID methodID, const jvalue *arguments, size_t nArguments)
{
    // Call the method.
    jbyte result;

    if (nArguments > 0)
        result = env->CallStaticByteMethodA(jClass.getClass(), methodID, arguments);
    else
        result = env->CallStaticByteMethod(jClass.getClass(), methodID);

    // Catch any java exception that occured during the method call, and throw it as a C++ exception.
    catchAndThrow();

    return ::jace::proxy::types::JByte(result);
}


template <> inline
::jace::proxy::types::JByte JMethod< ::jace::proxy::types::JByte >::invoke(JNIEnv *env, const ::jace::proxy::JObject& object, jmethodID methodID, const jvalue *arguments, size_t nArguments)
{
#ifdef JACE_CHECK_NULLS
    if (object.isNull())
        throw JNIException("[JMethod.invoke] Can not invoke an instance method on a null object.");
#endif
    // Call the method.
    jbyte result;

    if (nArguments > 0)
        result = env->CallByteMethodA(object, methodID, arguments);
    else
        result = env->CallByteMethod(object, methodID);

    // Catch any java exception that occured during the method call, and throw it as a C++ exception.
    catchAndThrow();

    return ::jace::proxy::types::JByte(result);
}


template <> inline
::jace::proxy::types::JChar JMethod< ::jace::proxy::types::JChar >::invoke(const JClass& jClass, const JArguments& arguments)
{
  // Get the methodID for the method matching the given arguments.
  jmethodID methodID = getMethodID(jClass, arguments, true);

  // Call the method.
  JNIEnv* env = attach();
  jchar result;
  
  if (arguments.asList().size() > 0)
	result = env->CallStaticCharMethodA(jClass.getClass(), methodID, &toVector(arguments)[0]);
  else
    result = env->CallStaticCharMethod(jClass.getClass(), methodID);

  // Catch any java exception that occured during the method call,
  // and throw it as a C++ exception. 
  catchAndThrow();

  return ::jace::proxy::types::JChar(result);
}


template <> inline
::jace::proxy::types::JChar JMethod< ::jace::proxy::types::JChar >::invoke(const ::jace::proxy::JObject& object, const JArguments& arguments)
{
  #ifdef JACE_CHECK_NULLS
    if (object.isNull())
      throw JNIException("[JMethod.invoke] Can not invoke an instance method on a null object.");
  #endif

  /* Get the methodID for the method matching the given arguments.
   */
  jmethodID methodID = getMethodID(object.getJavaJniClass(), arguments);

  // Call the method.
  JNIEnv* env = attach();
  jchar result;
  
  if (arguments.asList().size() > 0)
    result = env->CallCharMethodA(static_cast<jobject>(object), methodID, &toVector(arguments)[0]);
  else
    result = env->CallCharMethod(static_cast<jobject>(object), methodID);

  // Catch any java exception that occured during the method call,
  // and throw it as a C++ exception.
  catchAndThrow();
  
  return ::jace::proxy::types::JChar(result);
}


template <> inline
::jace::proxy::types::JChar JMethod< ::jace::proxy::types::JChar >::invoke(JNIEnv *env, const JClass& jClass, jmethodID methodID, const jvalue *arguments, size_t nArguments)
{
    // Call the method.
    jchar result;

    if (nArguments > 0)
        result = env->CallStaticCharMethodA(jClass.getClass(), methodID, arguments);
    else
        result = env->CallStaticCharMethod(jClass.getClass(), methodID);

    // Catch any java exception that occured during the method call, and throw it as a C++ exception.
    catchAndThrow();

    return ::jace::proxy::types::JChar(result);
}


template <> inline
::jace::proxy::types::JChar JMethod< ::jace::proxy::types::JChar >::invoke(JNIEnv *env, const ::jace::proxy::JObject& object, jmethodID methodID, const jvalue *arguments, size_t nArguments)
{
#ifdef JACE_CHECK_NULLS
    if (object.isNull())
        throw JNIException("[JMethod.invoke] Can not invoke an instance method on a null object.");
#endif
    // Call the method.
    jchar result;

    if (nArguments > 0)
        result = env->CallCharMethodA(object, methodID, arguments);
    else
        result = env->CallCharMethod(object, methodID);

    // Catch any java exception that occured during the method call, and throw it as a C++ exception.
    catchAndThrow();

    return ::jace::proxy::types::JChar(result);
}


template <> inline
::jace::proxy::types::JDouble JMethod< ::jace::proxy::types::JDouble >::invoke(const JClass& jClass, const JArguments& arguments)
{
  // Get the methodID for the method matching the given arguments.
  jmethodID methodID = getMethodID(jClass, arguments, true);

  // Call the method.
  JNIEnv* env = attach();
  jdouble result;
  
  if (arguments.asList().size() > 0)
    result = env->CallStaticDoubleMethodA(jClass.getClass(), methodID, &toVector(arguments)[0]);
  else
    result = env->CallStaticDoubleMethod(jClass.getClass(), methodID);

  // Catch any java exception that occured during the method call,
  // and throw it as a C++ exception. 
  catchAndThrow();

  return ::jace::proxy::types::JDouble(result);
}


template <> inline
::jace::proxy::types::JDouble JMethod< ::jace::proxy::types::JDouble >::invoke(const ::jace::proxy::JObject& object, const JArguments& arguments)
{
  #ifdef JACE_CHECK_NULLS
    if (object.isNull())
      throw JNIException("[JMethod.invoke] Can not invoke an instance method on a null object.");
  #endif

  // Get the methodID for the method matching the given arguments.
  jmethodID methodID = getMethodID(object.getJavaJniClass(), arguments);

  // Call the method.
  JNIEnv* env = attach();
  jdouble result;
  
  if (arguments.asList().size() > 0)
	result = env->CallDoubleMethodA(static_cast<jobject>(object), methodID, &toVector(arguments)[0]);
  else
    result = env->CallDoubleMethod(static_cast<jobject>(object), methodID);

  // Catch any java exception that occured during the method call,
  // and throw it as a C++ exception.
  catchAndThrow();
  
  return ::jace::proxy::types::JDouble(result);
}


template <> inline
::jace::proxy::types::JDouble JMethod< ::jace::proxy::types::JDouble >::invoke(JNIEnv *env, const JClass& jClass, jmethodID methodID, const jvalue *arguments, size_t nArguments)
{
    // Call the method.
    jdouble result;

    if (nArguments > 0)
        result = env->CallStaticDoubleMethodA(jClass.getClass(), methodID, arguments);
    else
        result = env->CallStaticDoubleMethod(jClass.getClass(), methodID);

    // Catch any java exception that occured during the method call, and throw it as a C++ exception.
    catchAndThrow();

    return ::jace::proxy::types::JDouble(result);
}


template <> inline
::jace::proxy::types::JDouble JMethod< ::jace::proxy::types::JDouble >::invoke(JNIEnv *env, const ::jace::proxy::JObject& object, jmethodID methodID, const jvalue *arguments, size_t nArguments)
{
#ifdef JACE_CHECK_NULLS
    if (object.isNull())
        throw JNIException("[JMethod.invoke] Can not invoke an instance method on a null object.");
#endif
    // Call the method.
    jdouble result;

    if (nArguments > 0)
        result = env->CallDoubleMethodA(object, methodID, arguments);
    else
        result = env->CallDoubleMethod(object, methodID);

    // Catch any java exception that occured during the method call, and throw it as a C++ exception.
    catchAndThrow();

    return ::jace::proxy::types::JDouble(result);
}


template <> inline
::jace::proxy::types::JFloat JMethod< ::jace::proxy::types::JFloat >::invoke(const JClass& jClass, const JArguments& arguments)
{
  // Get the methodID for the method matching the given arguments.
  jmethodID methodID = getMethodID(jClass, arguments, true);

  // Call the method.
  JNIEnv* env = attach();
  jfloat result;
  
  if (arguments.asList().size() > 0)
    result = env->CallStaticFloatMethodA(jClass.getClass(), methodID, &toVector(arguments)[0]);
  else
    result = env->CallStaticFloatMethod(jClass.getClass(), methodID);

  // Catch any java exception that occured during the method call,
  // and throw it as a C++ exception. 
  catchAndThrow();

  return ::jace::proxy::types::JFloat(result);
}


template <> inline
::jace::proxy::types::JFloat JMethod< ::jace::proxy::types::JFloat >::invoke(const ::jace::proxy::JObject& object, const JArguments& arguments)
{
  #ifdef JACE_CHECK_NULLS
    if (object.isNull())
      throw JNIException("[JMethod.invoke] Can not invoke an instance method on a null object.");
  #endif

  // Get the methodID for the method matching the given arguments.
  jmethodID methodID = getMethodID(object.getJavaJniClass(), arguments);

  // Call the method.
  JNIEnv* env = attach();
  jfloat result;
  
  if (arguments.asList().size() > 0)
    result = env->CallFloatMethodA(static_cast<jobject>(object), methodID, &toVector(arguments)[0]);
  else
    result = env->CallFloatMethod(static_cast<jobject>(object), methodID);

  // Catch any java exception that occured during the method call,
  // and throw it as a C++ exception.
  catchAndThrow();
  
  return ::jace::proxy::types::JFloat(result);
}


template <> inline
::jace::proxy::types::JFloat JMethod< ::jace::proxy::types::JFloat >::invoke(JNIEnv *env, const JClass& jClass, jmethodID methodID, const jvalue *arguments, size_t nArguments)
{
    // Call the method.
    jfloat result;

    if (nArguments > 0)
        result = env->CallStaticFloatMethodA(jClass.getClass(), methodID, arguments);
    else
        result = env->CallStaticFloatMethod(jClass.getClass(), methodID);

    // Catch any java exception that occured during the method call, and throw it as a C++ exception.
    catchAndThrow();

    return ::jace::proxy::types::JFloat(result);
}


template <> inline
::jace::proxy::types::JFloat JMethod< ::jace::proxy::types::JFloat >::invoke(JNIEnv *env, const ::jace::proxy::JObject& object, jmethodID methodID, const jvalue *arguments, size_t nArguments)
{
#ifdef JACE_CHECK_NULLS
    if (object.isNull())
        throw JNIException("[JMethod.invoke] Can not invoke an instance method on a null object.");
#endif
    // Call the method.
    jfloat result;

    if (nArguments > 0)
        result = env->CallFloatMethodA(object, methodID, arguments);
    else
        result = env->CallFloatMethod(object, methodID);

    // Catch any java exception that occured during the method call, and throw it as a C++ exception.
    catchAndThrow();

    return ::jace::proxy::types::JFloat(result);
}


template <> inline
::jace::proxy::types::JInt JMethod< ::jace::proxy::types::JInt >::invoke(const JClass& jClass, const JArguments& arguments)
{
  // Get the methodID for the method matching the given arguments.
  jmethodID methodID = getMethodID(jClass, arguments, true);

  // Call the method.
  JNIEnv* env = attach();
  jint result;
  
  if (arguments.asList().size() > 0)
	result = env->CallStaticIntMethodA(jClass.getClass(), methodID, &toVector(arguments)[0]);
  else
    result = env->CallStaticIntMethod(jClass.getClass(), methodID);

  // Catch any java exception that occured during the method call,
  // and throw it as a C++ exception. 
  catchAndThrow();

  return ::jace::proxy::types::JInt(result);
}


template <> inline
::jace::proxy::types::JInt JMethod< ::jace::proxy::types::JInt >::invoke(const ::jace::proxy::JObject& object, const JArguments& arguments)
{
  #ifdef JACE_CHECK_NULLS
    if (object.isNull())
      throw JNIException("[JMethod.invoke] Can not invoke an instance method on a null object.");
  #endif

  // Get the methodID for the method matching the given arguments.
  jmethodID methodID = getMethodID(object.getJavaJniClass(), arguments);

  // Call the method.
  JNIEnv* env = attach();
  jint result;
  
  if (arguments.asList().size() > 0)
	result = env->CallIntMethodA(static_cast<jobject>(object), methodID, &toVector(arguments)[0]);
  else
	result = env->CallIntMethod(static_cast<jobject>(object), methodID);

  // Catch any java exception that occured during the method call,
  // and throw it as a C++ exception.
  catchAndThrow();
  
  return ::jace::proxy::types::JInt(result);
}


template <> inline
::jace::proxy::types::JInt JMethod< ::jace::proxy::types::JInt >::invoke(JNIEnv *env, const JClass& jClass, jmethodID methodID, const jvalue *arguments, size_t nArguments)
{
    // Call the method.
    jint result;

    if (nArguments > 0)
        result = env->CallStaticIntMethodA(jClass.getClass(), methodID, arguments);
    else
        result = env->CallStaticIntMethod(jClass.getClass(), methodID);

    // Catch any java exception that occured during the method call, and throw it as a C++ exception.
    catchAndThrow();

    return ::jace::proxy::types::JInt(result);
}


template <> inline
::jace::proxy::types::JInt JMethod< ::jace::proxy::types::JInt >::invoke(JNIEnv *env, const ::jace::proxy::JObject& object, jmethodID methodID, const jvalue *arguments, size_t nArguments)
{
#ifdef JACE_CHECK_NULLS
    if (object.isNull())
        throw JNIException("[JMethod.invoke] Can not invoke an instance method on a null object.");
#endif
    // Call the method.
    jint result;

    if (nArguments > 0)
        result = env->CallIntMethodA(object, methodID, arguments);
    else
        result = env->CallIntMethod(object, methodID);

    // Catch any java exception that occured during the method call, and throw it as a C++ exception.
    catchAndThrow();

    return ::jace::proxy::types::JInt(result);
}


template <> inline
::jace::proxy::types::JLong JMethod< ::jace::proxy::types::JLong >::invoke(const JClass& jClass, const JArguments& arguments)
{
  // Get the methodID for the method matching the given arguments.
  jmethodID methodID = getMethodID(jClass, arguments, true);

  // Call the method.
  JNIEnv* env = attach();
  jlong result;
  
  if (arguments.asList().size() > 0)
	result = env->CallStaticLongMethodA(jClass.getClass(), methodID, &toVector(arguments)[0]);
  else
	result = env->CallStaticLongMethod(jClass.getClass(), methodID);

  // Catch any java exception that occured during the method call,
  // and throw it as a C++ exception. 
  catchAndThrow();

  return ::jace::proxy::types::JLong(result);
}


template <> inline
::jace::proxy::types::JLong JMethod< ::jace::proxy::types::JLong >::invoke(const ::jace::proxy::JObject& object, const JArguments& arguments)
{
  #ifdef JACE_CHECK_NULLS
    if (object.isNull())
      throw JNIException("[JMethod.invoke] Can not invoke an instance method on a null object.");
  #endif

  // Get the methodID for the method matching the given arguments.
  jmethodID methodID = getMethodID(object.getJavaJniClass(), arguments);

  // Call the method.
  JNIEnv* env = attach();
  jlong result;
  
  if (arguments.asList().size() > 0)
    result = env->CallLongMethodA(static_cast<jobject>(object), methodID, &toVector(arguments)[0]);
  else
    result = env->CallLongMethod(static_cast<jobject>(object), methodID);

  // Catch any java exception that occured during the method call,
  // and throw it as a C++ exception.
  catchAndThrow();
  
  return ::jace::proxy::types::JLong(result);
}


template <> inline
::jace::proxy::types::JLong JMethod< ::jace::proxy::types::JLong >::invoke(JNIEnv *env, const JClass& jClass, jmethodID methodID, const jvalue *arguments, size_t nArguments)
{
    // Call the method.
    jlong result;

    if (nArguments > 0)
        result = env->CallStaticLongMethodA(jClass.getClass(), methodID, arguments);
    else
        result = env->CallStaticLongMethod(jClass.getClass(), methodID);

    // Catch any java exception that occured during the method call, and throw it as a C++ exception.
    catchAndThrow();

    return ::jace::proxy::types::JLong(result);
}


template <> inline
::jace::proxy::types::JLong JMethod< ::jace::proxy::types::JLong >::invoke(JNIEnv *env, const ::jace::proxy::JObject& object, jmethodID methodID, const jvalue *arguments, size_t nArguments)
{
#ifdef JACE_CHECK_NULLS
    if (object.isNull())
        throw JNIException("[JMethod.invoke] Can not invoke an instance method on a null object.");
#endif
    // Call the method.
    jlong result;

    if (nArguments > 0)
        result = env->CallLongMethodA(object, methodID, arguments);
    else
        result = env->CallLongMethod(object, methodID);

    // Catch any java exception that occured during the method call, and throw it as a C++ exception.
    catchAndThrow();

    return ::jace::proxy::types::JLong(result);
}


template <> inline
::jace::proxy::types::JShort JMethod< ::jace::proxy::types::JShort >::invoke(const JClass& jClass, const JArguments& arguments)
{
  // Get the methodID for the method matching the given arguments.
  jmethodID methodID = getMethodID(jClass, arguments, true);

  // Call the method.
  JNIEnv* env = attach();
  jshort result;
  
  if (arguments.asList().size() > 0)
    result = env->CallStaticShortMethodA(jClass.getClass(), methodID, &toVector(arguments)[0]);
  else
    result = env->CallStaticShortMethod(jClass.getClass(), methodID);

  // Catch any java exception that occured during the method call,
  // and throw it as a C++ exception. 
  catchAndThrow();

  return ::jace::proxy::types::JShort(result);
}


template <> inline
::jace::proxy::types::JShort JMethod< ::jace::proxy::types::JShort >::invoke(const ::jace::proxy::JObject& object, const JArguments& arguments)
{
  #ifdef JACE_CHECK_NULLS
    if (object.isNull())
      throw JNIException("[JMethod.invoke] Can not invoke an instance method on a null object.");
  #endif

  // Get the methodID for the method matching the given arguments.
  jmethodID methodID = getMethodID(object.getJavaJniClass(), arguments);

  // Call the method.
  JNIEnv* env = attach();
  jshort result;
  
  if (arguments.asList().size() > 0)
    result = env->CallShortMethodA(static_cast<jobject>(object), methodID, &toVector(arguments)[0]);
  else
    result = env->CallShortMethod(static_cast<jobject>(object), methodID);

  // Catch any java exception that occured during the method call,
  // and throw it as a C++ exception.
  catchAndThrow();
  
  return ::jace::proxy::types::JShort(result);
}


template <> inline
::jace::proxy::types::JShort JMethod< ::jace::proxy::types::JShort >::invoke(JNIEnv *env, const JClass& jClass, jmethodID methodID, const jvalue *arguments, size_t nArguments)
{
    // Call the method.
    jshort result;

    if (nArguments > 0)
        result = env->CallStaticShortMethodA(jClass.getClass(), methodID, arguments);
    else
        result = env->CallStaticShortMethod(jClass.getClass(), methodID);

    // Catch any java exception that occured during the method call, and throw it as a C++ exception.
    catchAndThrow();

    return ::jace::proxy::types::JShort(result);
}


template <> inline
::jace::proxy::types::JShort JMethod< ::jace::proxy::types::JShort >::invoke(JNIEnv *env, const ::jace::proxy::JObject& object, jmethodID methodID, const jvalue *arguments, size_t nArguments)
{
#ifdef JACE_CHECK_NULLS
    if (object.isNull())
        throw JNIException("[JMethod.invoke] Can not invoke an instance method on a null object.");
#endif
    // Call the method.
    jshort result;

    if (nArguments > 0)
        result = env->CallShortMethodA(object, methodID, arguments);
    else
        result = env->CallShortMethod(object, methodID);

    // Catch any java exception that occured during the method call, and throw it as a C++ exception.
    catchAndThrow();

    return ::jace::proxy::types::JShort(result);
}


template <> inline
::jace::proxy::types::JVoid JMethod< ::jace::proxy::types::JVoid >::invoke(const JClass& jClass, const JArguments& arguments)
{
  // Get the methodID for the method matching the given arguments.
  jmethodID methodID = getMethodID(jClass, arguments, true);

  // Call the method.
  JNIEnv* env = attach();
  
  if (arguments.asList().size() > 0)
    env->CallStaticVoidMethodA(jClass.getClass(), methodID, &toVector(arguments)[0]);
  else
    env->CallStaticVoidMethod(jClass.getClass(), methodID);

  // Catch any java exception that occured during the method call,
  // and throw it as a C++ exception. 
  catchAndThrow();

  return ::jace::proxy::types::JVoid();
}

template <> inline
::jace::proxy::types::JVoid JMethod< ::jace::proxy::types::JVoid >::invoke(const ::jace::proxy::JObject& object, const JArguments& arguments)
{
  #ifdef JACE_CHECK_NULLS
    if (object.isNull())
      throw JNIException("[JMethod.invoke] Can not invoke an instance method on a null object.");
  #endif

  // Get the methodID for the method matching the given arguments.
  jmethodID methodID = getMethodID(object.getJavaJniClass(), arguments);

  // Call the method.
  JNIEnv* env = attach();

  if (arguments.asList().size() > 0)
	env->CallVoidMethodA(static_cast<jobject>(object), methodID, &toVector(arguments)[0]);
  else
	env->CallVoidMethod(static_cast<jobject>(object), methodID);

  // Catch any java exception that occured during the method call,
  // and throw it as a C++ exception.
  catchAndThrow();
  
  return ::jace::proxy::types::JVoid();
}


template <> inline
::jace::proxy::types::JVoid JMethod< ::jace::proxy::types::JVoid >::invoke(JNIEnv *env, const JClass& jClass, jmethodID methodID, const jvalue *arguments, size_t nArguments)
{
    // Call the method.
    if (nArguments > 0)
        env->CallStaticVoidMethodA(jClass.getClass(), methodID, arguments);
    else
        env->CallStaticVoidMethod(jClass.getClass(), methodID);

    // Catch any java exception that occured during the method call, and throw it as a C++ exception.
    catchAndThrow();

    return ::jace::proxy::types::JVoid();
}


template <> inline
::jace::proxy::types::JVoid JMethod< ::jace::proxy::types::JVoid >::invoke(JNIEnv *env, const ::jace::proxy::JObject& object, jmethodID methodID, const jvalue *arguments, size_t nArguments)
{
#ifdef JACE_CHECK_NULLS
    if (object.isNull())
        throw JNIException("[JMethod.invoke] Can not invoke an instance method on a null object.");
#endif
    // Call the method.
    if (nArguments > 0)
        env->CallVoidMethodA(object, methodID, arguments);
    else
        env->CallVoidMethod(object, methodID);

    // Catch any java exception that occured during the method call, and throw it as a C++ exception.
    catchAndThrow();

    return ::jace::proxy::types::JVoid();
}

END_NAMESPACE(jace)
